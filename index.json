[{"content":"Time really flies! It\u0026rsquo;s been six weeks since I\u0026rsquo;ve become a participant at the Recurse Center (RC). It\u0026rsquo;s an amazing space for new or experienced programmers, developers, or anyone who wants to spend time learning more about code. I\u0026rsquo;ve met so many motivated and talented individuals whom have inspired me to build more and code more frequently.\nI signed up to participate from February 15th to May 7th or the \u0026ldquo;Spring 1 2021 batch\u0026rdquo; as we call it. The first couple week of RC was a bit overwhelming especially since everything is virtual at the moment and all of my interactions are via zoom and chat on RC\u0026rsquo;s zulip platform. I didn\u0026rsquo;t work on my personal projects for the first week but I did pair program on a game of life problem and did a few leetcode problems collaboratively with others RC members. This definitely opened up my perspective on how others program and also gave me reassurance that I\u0026rsquo;m learning the right things and adhering to good coding conventions. Most coding best practices are subjective and really depends on your use case.\nLearning more about Generative Art I learned more about generative art and now I\u0026rsquo;m really interested in trying to create my own works some day. I\u0026rsquo;m definitely going to learn more about p5.js. I was introduced to the works of Tyler Hobbs and really like how he tries to imitate the qualities of traditional mediums like watercolor. The colors he chooses are energetic but at the same time, calming. I would love to hang one up in my house in the future.\nChanging my website to Hugo Blog I also got inspired to transform this website (linnali.com) from a html,css,javascript portfolio website to a hugo blog. I considered hugo prior to RC but I decided not to use it because it looked too plain but after seeing a fellow RC\u0026rsquo;er hugo blog I decided to convert. I liked the minimalism of it but you can add some customizations after you\u0026rsquo;re familiar with the theme structure. The important thing is that it\u0026rsquo;s a good place to start if you want to write blog posts and publish fast. I got caught up in designing my site a little more so it took longer. I watched Mike Dane\u0026rsquo;s Hugo Tutorial Series to get a basic understanding of how themes work and how to deploy. I will likely migrate this site to be a Next.js blog but for now hugo is a great template.\nAthena flights Next.js project For the past two weeks I\u0026rsquo;ve been working on Athena flights (you can find it on my Software Projects page.) It\u0026rsquo;s been a great learning experience. I was new to Next.js, Typescript, GraphQL, and Postgres so this project was a great way for me to start working with these technologies with another RC\u0026rsquo;er who has built another project with this tech stack. From this project I realized that having someone walk though a piece of code you\u0026rsquo;re working is immensely more helpful and speeds up your learning way more than just watching tutorials on the topic.\nRC is just a great place to learn from others even if they are on topics you\u0026rsquo;re not ever going to dig into. Just be careful to stay on track and prioritize your own personal goals before you get enticed down rabbit holes of other people\u0026rsquo;s passion projects. You can find people working in a variety of different programming languages (C, Haskell, Python, Javascript/Typescript, Java, Lisp, Rust, Scala, \u0026hellip;etc). There\u0026rsquo;s presentations every friday for those who want to share their work and I\u0026rsquo;ve seen amazing project from web apps and games to bots and a small scale database.\nIf this sounds like a group you\u0026rsquo;d like to be a part of you can apply at RC\u0026#39;s application page . It\u0026rsquo;s a great time. It\u0026rsquo;s completely free and since it\u0026rsquo;s all virtual you will not have to pay for NYC rent. Usually the program is held in-person and you\u0026rsquo;d have to either live or relocate to NYC but at the moment it is open to everyone around the world!\nI still have six more weeks in of my batch left and I will use this time to work on more coding project with my fellow RC members and learn more programming through zoom coffee chats and pair programming. But after my batch ends I\u0026rsquo;ll still keep learning and collaborate with others because our motto is to \u0026ldquo;Never Graduate\u0026rdquo;!\n","permalink":"https://linnali.com/posts/my-journey-as-a-participant-with-recurse-center-part-one-of-two/","summary":"Time really flies! It\u0026rsquo;s been six weeks since I\u0026rsquo;ve become a participant at the Recurse Center (RC). It\u0026rsquo;s an amazing space for new or experienced programmers, developers, or anyone who wants to spend time learning more about code. I\u0026rsquo;ve met so many motivated and talented individuals whom have inspired me to build more and code more frequently.\nI signed up to participate from February 15th to May 7th or the \u0026ldquo;Spring 1 2021 batch\u0026rdquo; as we call it.","title":"My journey as a participant with Recurse Center Part One of Two"},{"content":"Athena flights I worked on this project with @Joseph Tran . This is a web app built with Next.js, React and Typescript on the front-end. We used Postgres for the database and Typeorm with Apollo Server and Graphql on the back-end. We queried SpaceX\u0026rsquo;s api, then added flight information to the launches so users can choose flights to book based on destination and departure dates. I worked on both the front-end and back-end functionality to filter flights, authenticate users, cancel bookings.\nLive: athena-flights.vercel.app GitHub: athena-flights repo  Tdplaylist This is a web app I built with the MERN stack (MongoDB, Express, React and Nodejs). Authentication uses JWT. I haven\u0026rsquo;t found a task management app that lets me keep track of the time I\u0026rsquo;ve spent working on a task and since I was learning more about React I thought I\u0026rsquo;d just build one.\nLive: tdplaylist.xyz GitHub: tdplaylist repo  Clean Slate I\u0026rsquo;m volunteering with CodeforBoston and working as part of Clean Slate\u0026rsquo;s data team. Our work is to analyze court data so policy makers can make it easier for under-served people expunge their criminal records.\nI help with cleaning up court data with python in Jupyter notebooks. I\u0026rsquo;m also tasked with helping with documentation and organizing files between GitHub and GDrive so new member onboarding is smoother.\nLive: Coming Soon GitHub: clean-slate repo  Tetris with grids Tetris game built with vanilla javascript and css grid. Movement of tetris pieces is done by adding and removing css classes. Uses DOM EventListeners to control tetris pieces.\nLive: linnali.com/tetris-with-grid GitHub: tetris-with-grid repo ","permalink":"https://linnali.com/posts/software-projects/","summary":"Athena flights I worked on this project with @Joseph Tran . This is a web app built with Next.js, React and Typescript on the front-end. We used Postgres for the database and Typeorm with Apollo Server and Graphql on the back-end. We queried SpaceX\u0026rsquo;s api, then added flight information to the launches so users can choose flights to book based on destination and departure dates. I worked on both the front-end and back-end functionality to filter flights, authenticate users, cancel bookings.","title":"Software projects"},{"content":"I\u0026rsquo;m working on getting this hugo blog up and running. I want to have a place where I can share my thoughts on projects I\u0026rsquo;ve been working on. I\u0026rsquo;ve been keeping a google doc journal for myself but I feel like it\u0026rsquo;s a hassle to have to go online to write it. I was thinking about moving my journal to markdown anyways so I might as well just host it online with hugo as well. I\u0026rsquo;ll try this for a bit and also keep my google doc journal and see which one I like better.\nThis has been a great resource: Markdown Guide I think the problem with writing this straight in a markdown file is that there isn\u0026rsquo;t a spellchecker. My spelling have been getting progressively worse since I\u0026rsquo;ve stopped writing book reports with pen and paper.\nSpell Checker in VSCode editor Actually I just found a the solution to the problem above. For context, I\u0026rsquo;m writing this in vscode on my computer and I found that there is a spellchecker extension called \u0026ldquo;Code Spell Checker\u0026rdquo; by Street Side Software after a quick search. It works great now! I think it only checks for spelling and not grammar\u0026hellip; but google docs and microsoft word doesn\u0026rsquo;t do a spectacular job at that anyways.\nFormatting text and emojis in VSCode with keyboard shortcuts Also apparently you can press \u0026raquo; ctrl + p and type \u0026raquo; \u0026gt;join lines to format the text (probably can also add this as a keyboard shortcut. I think I\u0026rsquo;ll use leave it for now). I found that you have to disable the \u0026ldquo;Prettier\u0026rdquo; extension with Hugo otherwise it will mess up the formatting of the code parts if you go and edit the themes. There\u0026rsquo;s probably a setting I can change to have it be compatible. I\u0026rsquo;ll look into that later. Also, you can press \u0026raquo; ctrl + i to get emojis: üòÅ. Theres also Shortcodes for that\u0026hellip; I think\u0026hellip; but I don\u0026rsquo;t know how to do that yet so this is a nice alternative. I got my info from this stackoverflow page .\nOpen external links in new tab (target=\u0026rdquo;_blank\u0026rdquo;) with markdown in Hugo Add the following code to /layout/_default/_markup/render-link.html\n\u0026lt;a href=\u0026quot;{{ .Destination | safeURL }}\u0026quot;{{ with .Title}} title=\u0026quot;{{ . }}\u0026quot;{{ end }}{{ if strings.HasPrefix .Destination \u0026quot;http\u0026quot; }} target=\u0026quot;_blank\u0026quot;{{ end }}\u0026gt;{{ .Text }}\u0026lt;/a\u0026gt; Build and deploy my Hugo blog with GitHub pages To build it all I have to do is type hugo in the directory of the project on the terminal and I will get a generated folder named \u0026ldquo;public\u0026rdquo;\nhugo I have a GitHub pages repo set up that points to this domain (linnali.com). I have to copy and paste the contents in the generated \u0026ldquo;public\u0026rdquo; folder to the to my linnal86.github.io folder. With every update I have to overwrite the contents of the repo because it conflicts with what\u0026rsquo;s currently there. To overwrite use the following git command:\ngit push -f ","permalink":"https://linnali.com/posts/setting-up-my-hugo-blog/","summary":"I\u0026rsquo;m working on getting this hugo blog up and running. I want to have a place where I can share my thoughts on projects I\u0026rsquo;ve been working on. I\u0026rsquo;ve been keeping a google doc journal for myself but I feel like it\u0026rsquo;s a hassle to have to go online to write it. I was thinking about moving my journal to markdown anyways so I might as well just host it online with hugo as well.","title":"Setting up my Hugo blog"},{"content":"It took me 2 weeks to figure out how to deploy my fullstack nodejs react app. It uses the MERN stack - mongodb, express, react, and nodejs. I watched multiple youtube videos and read various blogs. I had to reference numerous different sources so here is a consolidated guide of how to do it.\nDigital Ocean Setup  I hosted my server on digitalocean. The alternatives includes Amazon AWS, Google Cloud, Siteground, Heroku, etc but I found that digitalocean was the easiest, most reliable and the cheapest in the long run.\nCreate Droplet on Digital Ocean Create a Digital Ocean account and then create a droplet. Choose the latest ubuntu image from Distrubutions, choose the plan and monthly rate that fits your needs. For toy apps or hobby projects you can just choose the basic plan and the cheapest monthly rate. You can always upgrade later.\nA droplet is a virtual private server (VPS).\nI DID NOT select mongodb from the marketplace. For some reason it works better for me if I manually install it on the droplet.\nChoose ubuntu, basic plan, and lowest monthly option You can choose either SSH keys or password. The password option is the fastest. Just create a password and that will be what you\u0026rsquo;ll use to login in when you ssh into the vps ubuntu linux distribution. You can change it to ssh later on Adding a domain to your application. if you want to get a SSL certificate from LetsEncrypt you will need a domain name. LetsEncrypt does not give certificates to raw ip address. You may be able to find other certificate providers who will give certificates for raw ips but I don\u0026rsquo;t know which ones\nOn digitalocean, on the sidebar go to \u0026gt; Networking Enter yourdomainname.com and add Add an A record for @ and www to your droplet.\n Add @ under HOSTNAME, select your droplet under WILL DIRECT TO and click Create Record Add www under HOSTNAME, select your droplet under WILL DIRECT TO and click Create Record  Go to domain registrar, (I use Namecheap), add the nameservers to the custom DNS section\nThis will take anywhere between 15 - 20 minutes to propogate. It may take longer. Check https://www.whatsmydns.net/ to see propgation status of your domain name.\nSSH into droplet and install mongodb, node, nginx and pm2 SSH into the vps ubuntu linux distribution by opening your terminal if your on mac or linux with the ip address generated by digitalocean. This can be found on the droplet next to the name of the droplet\nssh root@your-ip-address-from-digitalocean-next-to-droplet Enter y when terminal asks\nAre you sure you want to conitnue connecting (yes/no/[fingerprint])?\nThen it will ask you for your the root password you created in the Authentication section.\nNow you\u0026rsquo;re logged in.\nI installed mongodb manually and did not install it from the marketplace.\nsudo apt update sudo apt upgrade sudo apt install mongodb sudo systemctl status mongodb Install Node/NPM. Installing node will also install NPM in most cases. if not then also install npm Here is a link to the digitalocean node install guide for your reference\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt install nodejs sudo apt install build-essential #if you do not have npm after installing node npm install npm@latest -g #check version node -v npm -v Install NGINX, a opensource web server. NGINX can be used as a reverse proxy, it connects server to the internet and provides protection between requests.\n#option 1 for installing nginx sudo apt install nginx #option 2 for installing nginx sudo apt-get install nginx -y Add SSL with LetsEncrypt To get commands got to Certbot website and click on Get Certbot instructions. Select the software and system to get the instructions you need to run on the droplet.\nsudo snap install core; sudo snap refresh core sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot # recommended option sudo certbot --nginx # Y to Terms of Service to register with ACEM server # Y or N to share eamil with Electronic Frontier Foundation # domainname.com to No names wer found in your configuration files. Please enter in your domain name(s) # conservative option, if you want to make changes to nginx configuration by hand sudo certbot certonly --nginx # auto renew certificates before they expire sudo certbot renew --dry-run Go to your domainname.com and you should see the default nginx page\nUpdate NGINX configuration file to direct traffic #update nginx configuration file using nano, vim, or another editor sudo nano /etc/nginx/sites-available/default Copy in the following into the file you just opened. update the values for domainname.com to be your own and port to the port you want to run on.\nCopy into first server object and comment out\n listen 80 default_server; listen [::]:80 default_server;  MAKE SURE to copy into second server object also\nThe location /api is for routing calls to the api to the node server For this example I\u0026rsquo;m using localhost:5000 (port 5000) for my frontend and localhost:5001 (port 5001) for my backend\nserver { root /var/www/html; server_name domainname.com; location / { proxy_pass http://localhost:5000; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $host; proxy_set_header X-NginX-Proxy true; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection ‚Äúupgrade‚Äù; proxy_max_temp_file_size 0; proxy_redirect off; proxy_read_timeout 240s; } location /api { proxy_pass http://localhost:5001; } } NGINX works with Ubuntu firewall ufw. type ufw app list to see options:\n Nginx-Full‚Ää‚Äî‚ÄäEnables both ports 22 and 88 for HTTP and HTTPS access, respectively. Nginx-HTTP‚Ää‚Äî‚ÄäEnables port 22 for HTTP only. Nginx-HTTPS‚Ää‚Äî‚ÄäEnables port 80 \u0026amp; HTTPS only. OpenSSH  # Enable https ports for nginx on ubuntu firewall sudo ufw enable ufw allow 'Nginx HTTPS' ufw status # checks status of firewall # Check NGINX config sudo nginx -t # Restart NGINX #option 1 to restart nginx sudo service nginx restart #option 2 to restart nginx sudo systemctl restart nginx #other nginx commands sudo systemctl status nginx sudo systemctl stop nginx Create a Hello.js Application to Test Nginx configuration cd ~ nano hello.js const http = require('http'); const hostname = 'localhost'; const port = 5000; const server = http.createServer((req, res) =\u0026gt; { res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello World!\\n'); }); server.listen(port, hostname, () =\u0026gt; { console.log(`Server running at http://${hostname}:${port}/`); }); node hello.js Go to your domainname.com and you should see\n Hello World\n Install PM2 and Serve   PM2 is a process manager for nodejs applications with built-in load balancer. it keeps the app running in the background\n  Serve is for the React frontend app\n  sudo npm install pm2 -g sudo npm i -g serve #you can test out pm2 with hello.js pm2 start hello.js #you can see the status of pm2 using pm2 ps # Other pm2 commands pm2 show app.js pm2 status pm2 restart app.js pm2 stop app.js pm2 logs (Show log stream) pm2 flush (Clear logs) # To make sure app starts when reboot pm2 startup ubuntu Add the frontend React app Change your apiUrl to a realtive path, preferrably just \u0026ldquo;/api\u0026rdquo; This will make it so that your apiEndpoint will be /api/user for the user route.\n# An example will be that your React app will request either axios.post(\u0026quot;/api/users\u0026quot;, userVariable) # or it will be the following if you create wrap axios in a httpService http.post(\u0026quot;/api/users\u0026quot;, userVariable) Add the a proxy variable under the eslintConfig in package.json so that in the dev environment the apiUrl is still routing correctly\n \u0026quot;eslintConfig\u0026quot;: { \u0026quot;extends\u0026quot;: \u0026quot;react-app\u0026quot; }, \u0026quot;proxy\u0026quot;: { \u0026quot;/api\u0026quot;: { \u0026quot;target\u0026quot;: \u0026quot;http://localhost:3900\u0026quot; } }, Build your react application and move it to your droplet ubuntu linux distribution server\nnpm run build #check ufw status, if enabled you have to disable temporarily sudo ufw disable #option 1 for moving build folder into droplet sudo rsync -azv build root@droplet-ip-address:/var/www/html/ #if you want to move it into the home folder sudo rsync -azv build root@droplet-ip-address:~ #option 2 for moving build folder into droplet sudo scp -r build/ root@droplet-ip-address:/var/www/html/ #after moving the files you can enable again sudo ufw enable # try the follow first to serve frontend to see if it works serve -s /var/www/html/build/ # pm2 to serve continuously pm2 start serve -- -s /var/www/html/build/ Set up nodejs backend Clone your backend from Github and start your app to make sure it\u0026rsquo;s working\ngit clone your-backend-repo-name.git cd your-backend-repo-name npm install May need to set up environment variable if you have them. Create your relevant env, toml, json files for environment variable In your repo folder create a .env file if you\u0026rsquo;re using dot-env.\ntouch .env nano .env # copy-paste in your environment variables. Run the backend to see if it works\nnode index.js # haven't configured a script for running the app npm start # if you've set up a start script ctrl-C # to stop app Your application should run. Make sure it is running before moving on to the next step. Go to your https://domainname.com/api. Page should display Cannot GET /api\n#run the backend with pm2 to have it run in the background sudo pm2 start index.js Conclusion # To make sure app starts when reboot pm2 startup ubuntu There are a lot of different ways you can host your fullstack, frontend, backend applications and I choose put frontend and backend on a single droplet on digital ocean. If there is anything confusing or I got something wrong please let me know. Please also let me know if you find this helpful. Feel free to leave your comments in my corresponding gist\u0026amp;rsquo;s comment section . Thanks!\nSources:\nYoutube: Full Node.js Deployment - NGINX, SSL with Lets Encrypt Github Gist: Nodejs deployment PM2, NGINX, LetsEncrypt Youtube: Plan, Code, Deploy a Startup in 2 Hours ~ deploy instructions @ 1:35:00 Hackernoon: Finish deploying react app on digitalocean Digital Ocean: Set Up nodejs application Digital Ocean: Run nodejs server with Nginx Medium: Deploy fullstack with NGINX Digitalocean Dev.to: Fullstack using React, Strapi, NGINX, MongoDB on Digitalocean Configure nginx for nodejs backend and React frontend Freecodecamp: deploy first fullstack web app ","permalink":"https://linnali.com/posts/deploy-fullstack-nodejs-mongodb-express-backend-and-react-frontend-on-digital-ocean-with-nginx-single-droplet/","summary":"It took me 2 weeks to figure out how to deploy my fullstack nodejs react app. It uses the MERN stack - mongodb, express, react, and nodejs. I watched multiple youtube videos and read various blogs. I had to reference numerous different sources so here is a consolidated guide of how to do it.\nDigital Ocean Setup  I hosted my server on digitalocean. The alternatives includes Amazon AWS, Google Cloud, Siteground, Heroku, etc but I found that digitalocean was the easiest, most reliable and the cheapest in the long run.","title":"Deploy fullstack Nodejs MongoDB Express backend and React frontend on Digital Ocean with NGINX single droplet"}]